{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffc9e8b1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// base url to make request to the movie database \r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n\r\n    const [movies,setMovies] = useState([]);\r\n\r\n    //Snippet of code which run on specific conndition\r\n\r\n    useEffect(()=>{\r\n        //if [],run once when the roe loads and dont run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            // console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }fetchData();\r\n\r\n    },[fetchUrl]);\r\n\r\n    const opts = {\r\n        height:\"390\",\r\n        width:\"100\",\r\n        playerVars:{\r\n            autoplay : 1,\r\n        }\r\n    }\r\n\r\n    // console.log(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie =>(\r\n\r\n                    <img\r\n                     key = {movie.id} \r\n                     className={`row__poster ${isLargeRow && \"row__posterLarge\" }`}\r\n                     src={`${baseUrl}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n\r\n            {/* <Youtube video={trailerUrl} opts={opts} /> */}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Row;\r\n","const API_KEY = \"073de2da4ada3a3966b46c0545fc6c30\";\r\n\r\nconst requests = {\r\n    fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_geners=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_geners=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_geners=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_geners=1049`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_geners=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport requests from './request';\r\n\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0,n - 1) + \"...\": str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: 'center center,'\r\n            }}\r\n        >\r\n\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n\r\n                <p className=\"banner__description\">\r\n                    {truncate(movie?.overview,300)}\r\n                </p>\r\n            </div>       \r\n\r\n            <div className=\"banner__fadeBottom\" />\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n\r\n    const [show,handleShow] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                // src=\"https://pngimg.com/uploads/netflix/netflix_PNG4.png\"\r\n                src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n                alt=\"Felix Logo\"\r\n            />\r\n\r\n            {/* <img\r\n                className=\"nav__logo\"\r\n                src=\"https://www.pngfind.com/pngs/m/80-804949_profile-icon-for-the-politics-category-circle-hd.png\"\r\n                alt=\"Felix Logo\"\r\n            /> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\n\nimport Row from './Row';\nimport requests from './request';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\nfunction App() {\n  return (\n    <div className=\"app\">\n\n        {/* Navbar */}\n        <Navbar />\n\n        {/* Banner */}\n        <Banner />\n\n        <Row title=\"Netflix Originals\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n        <Row title=\"Action\" fetchUrl={requests.fetchActionMovies} />\n        <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies} />\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n        <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\n        <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies} />\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}